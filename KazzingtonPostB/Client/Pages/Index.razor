@page "/home"
@page "/"
@using KazzingtonPostB.Shared
@using Base64UrlEncoding
@using System.ComponentModel.DataAnnotations;

@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager
@inject Services.AppData articlePage

<PageTitle>KazzingtonPost - Index</PageTitle>

@if (proxiedpage == null)
{
    <MudGrid>
        <MudItem xs="12" sm="12" md="12">
            <MudText Align="Align.Center" Typo="Typo.h3" Class="mt-4">Hello!</MudText>
            <MudText Align="Align.Center" Typo="Typo.h3" Class="pb-1">Welcome to Kazzington​Post🅱️</MudText>
            <MudText Align="Align.Center" Typo="Typo.subtitle1" Class="smaller pb-3">Provide a URL to get the stuff:</MudText>
        </MudItem>
    </MudGrid>
    <MudContainer MaxWidth="MaxWidth.Large">
        <EditForm Class="pb-5" Model="@urlModel" OnValidSubmit="@GetArticle">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="12" md="12">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Site URL" HelperText="Must be a supported site"
                                      @bind-Value="urlModel.Url" For="@(() => urlModel.Url)" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Get the stuff</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudContainer>
    <MudText Align="Align.Center" Typo="Typo.subtitle1" Class="smaller mx-lg-auto">KazzingtonPost v0.6.1 - WebAssembly</MudText>
}


@if (loading == true && proxiedpage == null)
{
    <center>
        <br>
        <p><em>Loading...</em></p>
    </center>
}
else if (loading == true && proxiedpage != null)
{
    NavManager.NavigateTo("/article");
}

@code {
    private bool loading = false;
    private ProxyPage? proxiedpage;

    private UrlModel urlModel = new();

    // Configure Enabled Sites here
    private const String enabledSites = @"((https:\/\/)(.*)(repubblica.it).*)" + "|" + @"((https:\/\/)(.*)(corriere.it).*)" + "|" + @"((https:\/\/)(.*)(huffingtonpost.it).*)" + "|" + @"((https:\/\/)(.*)(limesonline.com).*)" + "|" + @"((https:\/\/)(.*)(editorialedomani.it).*) " + "|" + @"((https:\/\/)(.*)(ilfattoquotidiano.it).*)";

    private class UrlModel
    {
        [Required(ErrorMessage = "URL is required.")]
        [RegularExpression(enabledSites, ErrorMessage = "Site not supported, sorry.")]
        public string? Url { get; set; }
    }

    protected async Task GetArticle()
    {
        loading = true;

        string encodedUrl = "";
        bool isAMP = false;

        if (urlModel.Url != null)
        {
            encodedUrl = Base64UrlEncoder.Encode(urlModel.Url);

            // Check for AMP technique
            if (urlModel.Url.Contains("ilfattoquotidiano.it"))
            {
                isAMP = true;
            }
        }

        HttpClient NoAuthenticationClient =
            ClientFactory.CreateClient(
                "KazzingtonPostB.ServerAPI.NoAuthenticationClient");

        if (isAMP)
        {
            proxiedpage = await NoAuthenticationClient.GetFromJsonAsync<ProxyPage>($"GetPage?encodedUrl={encodedUrl}&amp=true");
        }
        else
        {
            proxiedpage = await NoAuthenticationClient.GetFromJsonAsync<ProxyPage>($"GetPage?encodedUrl={encodedUrl}&amp=false");
        }

        articlePage.Data = proxiedpage.HTML;
        articlePage.DataAMP = proxiedpage.HTMLAMP;
        articlePage.Url = urlModel.Url;
    }


}
